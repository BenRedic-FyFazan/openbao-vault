---
- name: OpenBao || Include asserts
  ansible.builtin.include_tasks: asserts.yml

# Should never trigger with the current installation, but leaving in for later updates.
- name: OpenBao || Add OpenBao group
  become: true
  ansible.builtin.group:
    name: "{{ openbao_group }}"
    state: present
  when: openbao_manage_group | bool

- name: OpenBao || Add OpenBao user
  become: true
  ansible.builtin.user:
    name: "{{ openbao_user }}"
    comment: "OpenBao user"
    group: "{{ openbao_group }}"
    groups: "{{ openbao_groups }}"
    system: true
  when: openbao_manage_user | bool

- name: OpenBao || Include OS-specific variables
  ansible.builtin.include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_os_family }}{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_os_family }}.yml"
      paths:
        - vars

- name: OpenBao || Check OpenBao installation
  ansible.builtin.shell: command -v bao  # noqa command-instead-of-shell  # command is a shell builtin
  environment:
    PATH: "{{ openbao_bin_path }}:{{ ansible_env.PATH }}"
  register: openbao_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: OpenBao || Get installed OpenBao version
  ansible.builtin.shell: |
    set -o pipefail
    {{ openbao_installation.stdout }} -version | cut -d' ' -f2 | tr -d 'v'
  args:
    executable: /bin/bash
  when: not openbao_installation is failed
  changed_when: false
  check_mode: false
  register: installed_openbao_version

- name: OpenBao || Compute if installation is required
  ansible.builtin.set_fact:
    installation_required: "{{ openbao_installation is failed or installed_openbao_version.stdout != openbao_version }}"

- name: OpenBao || Install OS packages and OpenBao via control host
  ansible.builtin.include_tasks: install.yml
  when:
    - installation_required | bool

- name: OpenBao || Set OpenBao mlock capability
  ansible.builtin.capabilities:
    path: "{{ openbao_bin_path }}/bao"
    capability: cap_ipc_lock+ep
    state: present

- name: OpenBao || Create directories
  become: true
  ansible.builtin.file:
    dest: "{{ item.path }}"
    state: directory
    owner: "{{ openbao_user }}"
    group: "{{ openbao_group }}"
    mode: "{{ item.mode }}"
  with_items:
    - path: "{{ openbao_config_path }}"
      mode: "{{ openbao_harden_file_perms | ternary('0550', '0750') }}"
    - path: "{{ openbao_data_path }}"
      mode: "0750"
    - path: "{{ openbao_log_path }}"
      mode: "0750"
    - path: "{{ openbao_run_path }}"
      mode: "0750"

- name: OpenBao || Enable logrotate for OpenBao
  become: true
  ansible.builtin.template:
    src: "{{ vault_logrotate_template }}"
    dest: /etc/logrotate.d/vault
    owner: root
    group: root
    mode: "0644"
  when: vault_enable_logrotate | bool

## OpenBao TLS configuration
- name: OpenBao || TLS configuration
  ansible.builtin.include_tasks: ../tasks/tls.yml
  when: vault_tls_disable == 0

- name: OpenBao || Backend storage TLS configuration
  ansible.builtin.include_tasks: ../tasks/backend_tls.yml
  when: vault_tls_gossip == 1

- name: OpenBao || Main configuration
  become: true
  ansible.builtin.template:
    src: "{{ vault_main_configuration_template }}"
    dest: "{{ vault_main_config }}"
    owner: "{{ openbao_user }}"
    group: "{{ openbao_group }}"
    mode: "0400"
    backup: "{{ vault_backup_config | default('false') | bool | lower }}"
  notify:
    - Restart openbao
    - Reload openbao

- name: "Set Exec output to log path when enabled log"
  ansible.builtin.set_fact:
    vault_exec_output: ">> {{ openbao_log_path }}/vault.log 2>&1"
  when: vault_enable_log

- name: Extract systemd version
  shell: |
    set -o pipefail
    systemctl --version systemd | head -n 1 | cut -d' ' -f2
  args:
    executable: /bin/bash
  changed_when: false
  check_mode: false
  register: systemd_version
  when:
    - ansible_service_mgr == "systemd"
  tags: skip_ansible_lint

- name: Systemd unit
  become: true
  ansible.builtin.template:
    src: "{{ vault_systemd_template }}"
    dest: "{{ vault_systemd_unit_path }}/{{ vault_systemd_service_name }}.service"
    force: true
    owner: root
    group: root
    mode: "0644"
  register: systemd_unit
  when:
    - ansible_service_mgr == "systemd"
    - systemd_version is defined

- name: Reload systemd
  become: true
  ansible.builtin.systemd:
    daemon-reload: true
  notify: Restart Vault
  when:
    - ansible_service_mgr == "systemd"
    - systemd_version is defined
    - systemd_unit is changed

- name: Start Vault
  become: true
  ansible.builtin.service:
    name: '{{ vault_systemd_service_name }}'
    state: started
    enabled: true
  register: start_vault

- name: Pause to let Vault startup correctly
  ansible.builtin.pause:
    seconds: "{{ openbao_start_pause_seconds }}"
  when:
    - start_vault is changed   # noqa no-handler
    - openbao_start_pause_seconds | int > 0

- name: Restart Vault if needed
  ansible.builtin.meta: flush_handlers

- name: Compute TLS friendly vault_addr
  ansible.builtin.set_fact:
    vault_addr: "{{ (vault_address == '0.0.0.0') | ternary('127.0.0.1', vault_address) }}"

- name: Insert http(s) export in dotfile
  become: true
  ansible.builtin.lineinfile:
    path: "{{ openbao_home }}/{{ openbao_dotfile }}"
    regexp: "^export VAULT_ADDR="
    line: "export VAULT_ADDR='{{ vault_tls_disable | ternary('http', 'https') }}://{{ vault_addr }}:{{ vault_port }}'"
    owner: "{{ openbao_user }}"
    group: "{{ openbao_group }}"
    create: true
    mode: "0600"
  when:
    - not openbao_dotfile_disable
    - ansible_os_family != 'Windows'

- name: Insert CA cert export in dotfile
  become: true
  ansible.builtin.lineinfile:
    path: "{{ openbao_home }}/{{ openbao_dotfile }}"
    regexp: "^export VAULT_CACERT="
    line: "export VAULT_CACERT={{ vault_tls_certs_path }}/{{ vault_tls_ca_file }}"
    owner: "{{ openbao_user }}"
    group: "{{ openbao_group }}"
    create: true
    mode: "0600"
  when:
    - not openbao_dotfile_disable
    - not vault_tls_disable | bool
    - ansible_os_family != 'Windows'

# This should succeed regardless of seal state
- name: Vault API reachable?
  # Attempt to help with long lines > 160 issues
  vars:
    vault_addr_protocol: "{{ vault_tls_disable | ternary('http', 'https') }}"
  environment:
    no_proxy: "{{ vault_api_addr | urlsplit('hostname') }}"
  ansible.builtin.uri:
    validate_certs: "{{ validate_certs_during_api_reachable_check | bool }}"
    url: "{{ vault_api_addr }}/v1/sys/health"
    method: GET
    # 200 if initialized, unsealed, and active
    # 429 if unsealed and standby
    # 472 if data recovery mode replication secondary and active
    # 473 if performance standby
    # 501 if not initialized
    # 503 if sealed
    # See: https://www.vaultproject.io/api/system/health.html
    status_code: 200, 429, 472, 473, 501, 503
    body_format: json
  register: check_result
  retries: 6
  until: check_result is succeeded
  delay: 10
  changed_when: false
  tags:
    - check_vault
  when:
    - not vault_disable_api_health_check | bool

- name: Vault status
  ansible.builtin.debug:
    msg: "Vault is {{ vault_http_status[check_result.status | string] }}"
  tags:
    - check_vault
  when:
    - not vault_disable_api_health_check | bool
